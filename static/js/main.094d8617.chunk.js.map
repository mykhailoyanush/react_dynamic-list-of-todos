{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api/api.ts","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","selectId","selectedValue","random","filterValue","useState","visibleTodos","setVisibleTodos","useEffect","copyTodo","filter","todo","title","includes","completed","sort","Math","className","map","classnames","htmlFor","id","toString","type","checked","readOnly","userId","onClick","CurrentUser","setSelectedUserId","user","setUser","fetch","then","response","ok","Error","status","json","getUserDetail","userFromServer","name","email","phone","style","float","App","setTodos","setFilterValue","setSelectedValue","setRandom","todosFromServer","value","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.094d8617.chunk.js","sourcesContent":["import classnames from 'classnames';\nimport React, { useState, useEffect } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  filterValue: string,\n  selectedValue: string,\n  random: number,\n  selectId: (userId:number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  selectId,\n  selectedValue,\n  random,\n  filterValue,\n}) => {\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    const copyTodo = [...todos]\n      .filter(todo => todo.title.includes(filterValue))\n      .filter(todo => {\n        switch (selectedValue) {\n          case 'all':\n            return true;\n          case 'completed':\n            return todo.completed;\n          case 'active':\n            return !todo.completed;\n          default:\n            return true;\n        }\n      });\n\n    if (random !== 0) {\n      copyTodo.sort(() => 0.5 - Math.random());\n    }\n\n    setVisibleTodos(copyTodo);\n  }, [filterValue, todos, selectedValue, random]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label htmlFor={todo.id.toString()}>\n                <input\n                  id={todo.id.toString()}\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classnames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': (todo.userId === selectedUserId) },\n                )}\n                type=\"button\"\n                onClick={() => selectId(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUserDetail } from '../../api/api';\n\ntype Props = {\n  userId: number,\n  setSelectedUserId: (id: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, setSelectedUserId }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUserDetail(userId).then(userFromServer => setUser(userFromServer));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user\n        && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {' '}\n                {user.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button\"\n              style={{ float: 'right' }}\n              onClick={() => setSelectedUserId(0)}\n            >\n              Clear\n            </button>\n          </>\n        )}\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/todos';\nconst USER_URL = 'https://mate.academy/students-api/users/';\n\nexport function getAllTodo(): Promise<Todo[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - list not found`);\n      }\n\n      return response.json();\n    });\n}\n\nexport function getUserDetail(userId: number): Promise<User> {\n  return fetch(`${USER_URL}${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - user not found`);\n      }\n\n      return response.json();\n    });\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodo } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedValue, setSelectedValue] = useState('all');\n  const [random, setRandom] = useState(0);\n\n  useEffect(() => {\n    getAllTodo().then(todosFromServer => setTodos(todosFromServer));\n  }, []);\n\n  const selectId = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <label htmlFor=\"filterTitle\">\n          Filter by title:\n          <input\n            id=\"ilterTitle\"\n            type=\"text\"\n            value={filterValue}\n            onChange={(e) => setFilterValue(e.target.value)}\n          />\n        </label>\n        <br />\n        <label htmlFor=\"filterSelect\">\n          Select Filter:\n          <select\n            id=\"filterSelect\"\n            value={selectedValue}\n            onChange={(e) => setSelectedValue(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </label>\n        <br />\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setRandom(Math.random())}\n        >\n          Randomize\n        </button>\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          filterValue={filterValue}\n          selectedValue={selectedValue}\n          random={random}\n          selectId={selectId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}