{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","image/Spinner-3.gif","App.tsx","components/CurrentUser/CurrentUser.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","selectId","className","map","todo","classnames","completed","htmlFor","id","toString","type","checked","readOnly","title","userId","onClick","API_URL","request","url","errorMessage","fetch","then","response","ok","Error","status","json","Filters","CurrentUser","setSelectedUserId","useState","user","setUser","isLoading","setIsLoading","useEffect","getUserDetail","userFromServer","name","email","phone","NaN","src","loading","alt","width","height","style","float","App","setTodos","filterValue","setFilterValue","selectedValue","setSelectedValue","random","setRandom","visibleTodos","setVisibleTodos","todosFromServer","copyTodo","filter","includes","ALL","COMPLETED","ACTIVE","sort","Math","value","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.911fc7cb.chunk.js","sourcesContent":["import classnames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  selectId: (userId:number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  selectId,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classnames(\n              'TodoList__item',\n              { 'TodoList__item--unchecked': !todo.completed },\n              { 'TodoList__item--checked': todo.completed },\n            )}\n          >\n            <label htmlFor={todo.id.toString()}>\n              <input\n                id={todo.id.toString()}\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classnames(\n                'TodoList__user-button',\n                'button',\n                { 'TodoList__user-button--selected': (todo.userId === selectedUserId) },\n              )}\n              type=\"button\"\n              onClick={() => selectId(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const API_URL = 'https://mate.academy/students-api/';\n\nfunction request(url: string, errorMessage: string) {\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${errorMessage}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport function getAllTodo(): Promise<Todo[]> {\n  return request(`${API_URL}todos`, 'list not found');\n}\n\nexport function getUserDetail(userId: number): Promise<User> {\n  return request(`${API_URL}users/${userId}`, 'user not found');\n}\n","export default __webpack_public_path__ + \"static/media/Spinner-3.b51df3f3.gif\";","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodo } from './api/api';\n\nenum Filters{\n  ALL = 'ALL',\n  ACTIVE = 'ACTIVE',\n  COMPLETED = 'COMPLETED',\n}\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedValue, setSelectedValue] = useState('all');\n  const [random, setRandom] = useState(0);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    try {\n      getAllTodo().then(todosFromServer => setTodos(todosFromServer));\n    } catch {\n      setTodos([]);\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    const copyTodo = [...todos]\n      .filter(todo => todo.title.includes(filterValue))\n      .filter(todo => {\n        switch (selectedValue) {\n          case Filters.ALL:\n            return true;\n          case Filters.COMPLETED:\n            return todo.completed;\n          case Filters.ACTIVE:\n            return !todo.completed;\n          default:\n            return true;\n        }\n      });\n\n    if (random !== 0) {\n      copyTodo.sort(() => 0.5 - Math.random());\n    }\n\n    setVisibleTodos(copyTodo);\n  }, [filterValue, todos, selectedValue, random]);\n\n  const selectId = (userId: number) => {\n    setIsLoading(true);\n    setSelectedUserId(userId);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <label htmlFor=\"filterTitle\">\n          Filter by title:\n          <input\n            id=\"ilterTitle\"\n            type=\"text\"\n            value={filterValue}\n            onChange={(e) => setFilterValue(e.target.value)}\n          />\n        </label>\n        <br />\n        <label htmlFor=\"filterSelect\">\n          Select Filter:\n          <select\n            id=\"filterSelect\"\n            value={selectedValue}\n            onChange={(e) => setSelectedValue(e.target.value)}\n          >\n            <option value={Filters.ALL}>{Filters.ALL}</option>\n            <option value={Filters.ACTIVE}>{Filters.ACTIVE}</option>\n            <option value={Filters.COMPLETED}>{Filters.COMPLETED}</option>\n          </select>\n        </label>\n        <br />\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setRandom(Math.random())}\n        >\n          Randomize\n        </button>\n        { isLoading\n          ? <img src=\"./image/Spinner-3.gif\" alt=\"Loading\" width=\"100px\" height=\"100px\" />\n          : (\n            <TodoList\n              todos={visibleTodos}\n              selectedUserId={selectedUserId}\n              selectId={selectId}\n            />\n          )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUserDetail } from '../../api/api';\nimport loading from '../../image/Spinner-3.gif';\n\ntype Props = {\n  userId: number,\n  setSelectedUserId: (id: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, setSelectedUserId }) => {\n  const [user, setUser] = useState<User>();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    try {\n      getUserDetail(userId).then(userFromServer => setUser(userFromServer));\n    } catch {\n      setUser({\n        id: userId,\n        name: 'User not Found',\n        email: '',\n        phone: NaN,\n      });\n    }\n\n    setIsLoading(false);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      { isLoading\n        ? <img src={loading} alt=\"Loading\" width=\"100px\" height=\"100px\" />\n        : (user\n              && (\n                <>\n                  <h2 className=\"CurrentUser__title\">\n                    <span>\n                      Selected user:\n                      {' '}\n                      {user.id}\n                    </span>\n                  </h2>\n\n                  <h3 className=\"CurrentUser__name\">{user.name}</h3>\n                  <p className=\"CurrentUser__email\">{user.email}</p>\n                  <p className=\"CurrentUser__phone\">{user.phone}</p>\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    style={{ float: 'right' }}\n                    onClick={() => setSelectedUserId(0)}\n                  >\n                    Clear\n                  </button>\n                </>\n              )\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}